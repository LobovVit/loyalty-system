package pgusers

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/jackc/pgerrcode"
	"github.com/jackc/pgx/v5/pgconn"
	"go.uber.org/zap"
	"loyalty-system/internal/domain"
	"loyalty-system/pkg/logger"
	"loyalty-system/pkg/postgresql"
)

type PGUserStorage struct {
	dbConnections *sql.DB
}

func NewUserStorage(ctx context.Context, dsn string) (*PGUserStorage, error) {
	dbCon, err := postgresql.NewConn(dsn)
	if err != nil {
		logger.Log.Error("Get db connection failed", zap.Error(err))
		return nil, err
	}
	s := &PGUserStorage{dbConnections: dbCon}
	const createTableSQL = `create table IF NOT EXISTS users (id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,login text not null unique , hash text not null)`
	_, err = s.dbConnections.ExecContext(ctx, createTableSQL)
	if err != nil {
		logger.Log.Error("Create table failed", zap.Error(err))
		return nil, err
	}
	return s, nil
}

func (ms *PGUserStorage) GetUser(ctx context.Context, login *string) (*domain.User, error) {
	const selectSQL = `select id,hash from users where login = $1`
	row := ms.dbConnections.QueryRowContext(ctx, selectSQL, login)
	user := domain.User{}
	err := row.Scan(&user.UserID, &user.Hash)
	if err != nil && errors.Is(err, sql.ErrNoRows) {
		return nil, nil
	}
	if err != nil {
		logger.Log.Error("Select login failed", zap.String("login", *login))
		return nil, fmt.Errorf("select: %w", err)
	}
	return &user, nil
}

func (ms *PGUserStorage) AddUser(ctx context.Context, user *domain.User) error {
	const insertSQL = `insert into users (login, hash) VALUES ($1,$2)`
	_, err := ms.dbConnections.ExecContext(ctx, insertSQL, user.Login, user.Hash)
	if err != nil {
		logger.Log.Error("Insert user failed", zap.Error(err))
		return fmt.Errorf("insert: %w", err)
	}
	return nil
}

func (ms *PGUserStorage) IsRetryable(err error) bool {
	if err == nil {
		return false
	}
	var pgErr *pgconn.PgError
	return errors.As(err, &pgErr) && pgerrcode.IsConnectionException(pgErr.Code)
}
